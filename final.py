# -*- coding: utf-8 -*-
"""final-notebook-review2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M6gWzqwsWWwzChDAM5P5Y50bOmuXaSls

### What is COVID-19?

COVID-19 is a respiratory illness caused by a new virus. Symptoms include fever, coughing, sore throat and shortness of breath. The virus can spread from person to person, but good hygiene can prevent infection.

### Related Information about COVID-19

COVID-19 may not be fatal but it spreads faster than other diseases, like common cold. Every virus has Basic Reproduction number (R0) which implies how many people will get the disease from the infected person. As per inital reseach work R0 of COVID-19 is 2.7.

Currently the goal of all scientists around the world is to "Flatten the Curve". COVID-19 currently has exponential growth rate around the world which we will be seeing in the notebook ahead. Flattening the Curve typically implies even if the number of Confirmed Cases are increasing but the distribution of those cases should be over longer timestamp. To put it in simple words if say suppose COVID-19 is going infect 100K people then those many people should be infected in 1 year but not in a month. 

The sole reason to Flatten the Curve is to reudce the load on the Medical Systems so as to increase the focus of Research to find the Medicine for the disease.

Every Pandemic has four stages:

Stage 1: Confirmed Cases come from other countries

Stage 2: Local Transmission Begins

Stage 3: Communities impacted with local transimission

Stage 4: Significant Transmission with no end in sight

Italy, USA, UK and France are the two countries which are currently in Stage 4
While India is in on the edge of Stage 3.

Other ways to tackle the disease like Corona other than Travel Ban, Cross-Border shutdown, Ban on immigrants are Testing, Contact Tracing and Quarantine.

### Objective of the Notebook

Objective of this notebook is to study COVID-19 outbreak with the help of some basic visualizations techniques. Comparison of China where the COVID-19 originally originated from with the Rest of the World. Perform predictions and Time Series forecasting in order to study the impact and spread of the COVID-19 in comming days.

## Let's get Started

## Importing required Python Packages and Libraries
"""

import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import timedelta
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import datetime as dt
#from fbprophet import Prophet
from sklearn.metrics import silhouette_score,silhouette_samples
from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.preprocessing import PolynomialFeatures
from statsmodels.tsa.stattools import adfuller
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error,r2_score
import statsmodels.api as sm
from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing
from sklearn.model_selection import GridSearchCV
# from pmdarima import auto_arima
std=StandardScaler()

corona=pd.read_csv('covid_19_data.csv')
corona.head()

# print("Size: ",corona.shape)
# print("null:\n",corona.isnull().sum())
# print("Data Types:\n",corona.dtypes)

#Dropping column as SNo is of no use, and "Province/State" contains too many missing values
corona.drop(["SNo"],1,inplace=True)

#Converting "Observation Date" into Datetime format
corona["ObservationDate"]=pd.to_datetime(corona["ObservationDate"])

group_countries=corona.groupby(["Country/Region","ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})

group_countries["Active Cases"]=group_countries["Confirmed"]-group_countries["Recovered"]-group_countries["Deaths"]
group_countries["log_confirmed"]=np.log(group_countries["Confirmed"])
group_countries["log_active"]=np.log(group_countries["Active Cases"])

"""## Datewise analysis """

#Grouping different types of cases as per the date
date_wise_data=corona.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})
date_wise_data["Days-Since"]=date_wise_data.index-date_wise_data.index.min()

date_wise_data.head()

fig=px.bar(x=date_wise_data.index,y=date_wise_data["Confirmed"]-date_wise_data["Recovered"]-date_wise_data["Deaths"])
fig.update_layout(title="Distribution of Number of Active Cases",
                  xaxis_title="Date",yaxis_title="Number of Cases",)
# fig.show()

"""#### Active Cases = Number of Confirmed Cases - Number of Recovered Cases - Number of Death Cases
#### Increase in number of Active Cases is probably an indication of Recovered case or Death case number is dropping in comparison to number of Confirmed Cases drastically. Will look for the conclusive evidence for the same in the notebook ahead.
"""

fig=px.bar(x=date_wise_data.index,y=date_wise_data["Recovered"]+date_wise_data["Deaths"])
fig.update_layout(title="Distribution of Number of Closed Cases",
                  xaxis_title="Date",yaxis_title="Number of Cases")
# fig.show()

"""#### Closed Cases = Number of Recovered Cases + Number of Death Cases 
#### Increase in number of Closed classes imply either more patients are getting recovered from the disease or more pepole are dying because of COVID-19

###### Growth rate of Confirmed, Recovered and Death Cases
"""

fig=go.Figure()
fig.add_trace(go.Scatter(x=date_wise_data.index, y=date_wise_data["Confirmed"],
                    mode='lines+markers',
                    name='Confirmed Cases'))
fig.add_trace(go.Scatter(x=date_wise_data.index, y=date_wise_data["Recovered"],
                    mode='lines+markers',
                    name='Recovered Cases'))
fig.add_trace(go.Scatter(x=date_wise_data.index, y=date_wise_data["Deaths"],
                    mode='lines+markers',
                    name='Death Cases'))
fig.update_layout(title="Growth of different types of cases",
                 xaxis_title="Date",yaxis_title="Number of Cases",legend=dict(x=0,y=1,traceorder="normal"))
# fig.show()

"""#### Moratality and Recovery Rate analysis around the World"""

#Calculating the Mortality Rate and Recovery Rate
date_wise_data["Mortality Rate"]=(date_wise_data["Deaths"]/date_wise_data["Confirmed"])*100
date_wise_data["Recovery Rate"]=(date_wise_data["Recovered"]/date_wise_data["Confirmed"])*100
date_wise_data["Active Cases"]=date_wise_data["Confirmed"]-date_wise_data["Recovered"]-date_wise_data["Deaths"]
date_wise_data["Closed Cases"]=date_wise_data["Recovered"]+date_wise_data["Deaths"]

# print("Average Mortality Rate",date_wise_data["Mortality Rate"].mean())
# print("Median Mortality Rate",date_wise_data["Mortality Rate"].median())
# print("Average Recovery Rate",date_wise_data["Recovery Rate"].mean())
# print("Median Recovery Rate",date_wise_data["Recovery Rate"].median())

#Plotting Mortality and Recovery Rate 
fig = make_subplots(rows=2, cols=1,
                   subplot_titles=("Recovery Rate", "Mortatlity Rate"))
fig.add_trace(
    go.Scatter(x=date_wise_data.index, y=(date_wise_data["Recovered"]/date_wise_data["Confirmed"])*100,name="Recovery Rate"),
    row=1, col=1
)
fig.add_trace(
    go.Scatter(x=date_wise_data.index, y=(date_wise_data["Deaths"]/date_wise_data["Confirmed"])*100,name="Mortality Rate"),
    row=2, col=1
)
fig.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder="normal"))
fig.update_xaxes(title_text="Date", row=1, col=1)
fig.update_yaxes(title_text="Recovery Rate", row=1, col=1)
fig.update_xaxes(title_text="Date", row=1, col=2)
fig.update_yaxes(title_text="Mortality Rate", row=1, col=2)
# fig.show()

"""#### Mortality rate = (Number of Death Cases / Number of Confirmed Cases) x 100
#### Recovery Rate= (Number of Recoverd Cases / Number of Confirmed Cases) x 100
#### Mortality rate is showing a considerable for a pretty long time, which is positive sign
#### Recovery Rate has started to pick up again which is a good sign, another supportive reason to why number of Closed Cases are increasing

### Growth Factor
Growth factor is the factor by which a quantity multiplies itself over time. The formula used is:

**Formula: Every day's new (Confirmed,Recovered,Deaths) / new (Confirmed,Recovered,Deaths) on the previous day.**

A growth factor **above 1 indicates an increase correspoding cases**.

A growth factor **above 1 but trending downward** is a positive sign, whereas a **growth factor constantly above 1 is the sign of exponential growth**.

A growth factor **constant at 1 indicates there is no change in any kind of cases**.
"""

print("Average growth factor of number of Confirmed Cases: ",(date_wise_data["Confirmed"]/date_wise_data["Confirmed"].shift()).mean())
print("Median growth factor of number of Confirmed Cases: ",(date_wise_data["Confirmed"]/date_wise_data["Confirmed"].shift()).median())
print("Average growth factor of number of Recovered Cases: ",(date_wise_data["Recovered"]/date_wise_data["Recovered"].shift()).mean())
print("Median growth factor of number of Recovered Cases: ",(date_wise_data["Recovered"]/date_wise_data["Recovered"].shift()).median())
print("Average growth factor of number of Death Cases: ",(date_wise_data["Deaths"]/date_wise_data["Deaths"].shift()).mean())
print("Median growth factor of number of Death Cases: ",(date_wise_data["Deaths"]/date_wise_data["Deaths"].shift()).median())

fig=go.Figure()
fig.add_trace(go.Scatter(x=date_wise_data.index, y=date_wise_data["Confirmed"]/date_wise_data["Confirmed"].shift(),
                    mode='lines',
                    name='Growth Factor of Confirmed Cases'))
fig.add_trace(go.Scatter(x=date_wise_data.index, y=date_wise_data["Recovered"]/date_wise_data["Recovered"].shift(),
                    mode='lines',
                    name='Growth Factor of Recovered Cases'))
fig.add_trace(go.Scatter(x=date_wise_data.index, y=date_wise_data["Deaths"]/date_wise_data["Deaths"].shift(),
                    mode='lines',
                    name='Growth Factor of Death Cases'))
fig.update_layout(title="Datewise Growth Factor of different types of cases",
                 xaxis_title="Date",yaxis_title="Growth Factor",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
# fig.show()



fig=go.Figure()
fig.add_trace(go.Scatter(x=date_wise_data.index, 
                         y=(date_wise_data["Confirmed"]-date_wise_data["Recovered"]-date_wise_data["Deaths"])/(date_wise_data["Confirmed"]-date_wise_data["Recovered"]-date_wise_data["Deaths"]).shift(),
                    mode='lines',
                    name='Growth Factor of Active Cases'))
fig.add_trace(go.Scatter(x=date_wise_data.index, y=(date_wise_data["Recovered"]+date_wise_data["Deaths"])/(date_wise_data["Recovered"]+date_wise_data["Deaths"]).shift(),
                    mode='lines',
                    name='Growth Factor of Closed Cases'))
fig.update_layout(title="Datewise Growth Factor of Active and Closed Cases",
                 xaxis_title="Date",yaxis_title="Growth Factor",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
# fig.show()

country_wise=corona[corona["ObservationDate"]==corona["ObservationDate"].max()].groupby(["Country/Region"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'}).sort_values(["Confirmed"],ascending=False)
country_wise["Mortality"]=(country_wise["Deaths"]/country_wise["Confirmed"])*100
country_wise["Recovery"]=(country_wise["Recovered"]/country_wise["Confirmed"])*100

country_wise.head()

fig=go.Figure()
for country in country_wise.head(10).index:
    fig.add_trace(go.Scatter(x=group_countries.loc[country]["log_confirmed"], y=group_countries.loc[country]["log_active"],
                    mode='lines',name=country))
fig.update_layout(height=600,title="COVID-19 Journey of Top 15 Worst Affected Countries",
                 xaxis_title="Confirmed Cases (Logrithmic Scale)",yaxis_title="Active Cases (Logarithmic Scale)",
                 legend=dict(x=0,y=1,traceorder="normal"))
# fig.show()

"""## Data Analysis for India

### For detailed Data analysis and Forecasting specific to India
### Please checkout my Kernel: 
### Click Here: [COVID-19 Data Analysis & Forecasting for India](https://www.kaggle.com/neelkudu28/covid-19-data-analysis-forecasting-for-india)

The notebook consists of detailed data analysis specific to India, Comparison of India with the neighboring countries, Comparison with worst affected countries in this pandemic and try and build Machine Learnig Prediction and Time Series and Forecasting models to try and understand the how the numbers are going to be in near future.
"""
def checkcountry(s):
    india_data=corona[corona["Country/Region"]==s]
    date_wise_data_india=india_data.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})
    # print(date_wise_data_india.iloc[-1])
    # print("Total Active Cases: ",date_wise_data_india["Confirmed"].iloc[-1]-date_wise_data_india["Recovered"].iloc[-1]-date_wise_data_india["Deaths"].iloc[-1])
    # print("Total Closed Cases: ",date_wise_data_india["Recovered"].iloc[-1]+date_wise_data_india["Deaths"].iloc[-1])

    fig=go.Figure()
    fig.add_trace(go.Scatter(x=date_wise_data_india.index, y=date_wise_data_india["Confirmed"],
                    mode='lines+markers',
                    name='Confirmed Cases'))
    fig.add_trace(go.Scatter(x=date_wise_data_india.index, y=date_wise_data_india["Recovered"],
                    mode='lines+markers',
                    name='Recovered Cases'))
    fig.add_trace(go.Scatter(x=date_wise_data_india.index, y=date_wise_data_india["Deaths"],
                    mode='lines+markers',
                    name='Death Cases'))
    fig.update_layout(title="Growth of different types of cases in "+s,
                 xaxis_title="Date",yaxis_title="Number of Cases",legend=dict(x=0,y=1,traceorder="normal"))
    fig.show()
# checkcountry('Brazil')
def nameview(s):
    india_data=corona[corona["Country/Region"]==s]
    date_wise_data_india=india_data.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})
    fig=px.bar(x=date_wise_data_india.index,y=date_wise_data_india["Confirmed"]-date_wise_data_india["Recovered"]-date_wise_data_india["Deaths"])
    fig.update_layout(title="Distribution of Number of Active Cases in "+s,
                      xaxis_title="Date",yaxis_title="Number of Cases",)
    fig.show()
# nameview('Brazil')    

def ddincrease(s):
    india_data=corona[corona["Country/Region"]==s]
    date_wise_data_india=india_data.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})
    fig=go.Figure()    
    fig.add_trace(go.Scatter(x=date_wise_data_india.index, y=date_wise_data_india["Confirmed"].diff().fillna(0),
                        mode='lines+markers',
                        name='Confirmed Cases'))
    fig.add_trace(go.Scatter(x=date_wise_data_india.index, y=date_wise_data_india["Recovered"].diff().fillna(0),
                        mode='lines+markers',
                        name='Recovered Cases'))
    fig.add_trace(go.Scatter(x=date_wise_data_india.index, y=date_wise_data_india["Deaths"].diff().fillna(0),
                        mode='lines+markers',
                        name='Death Cases'))
    fig.update_layout(title="Daily increase in different types of cases in "+s,
                    xaxis_title="Date",yaxis_title="Number of Cases",legend=dict(x=0,y=1,traceorder="normal"))
    fig.show()
ddincrease('Brazil')
